"""
ABOUTME: Plugin system for sleep tracker integrations
ABOUTME: Handles plugin discovery, loading, and management
"""

import logging
from abc import ABC, abstractmethod
from datetime import datetime
from pathlib import Path
from typing import Any, Dict, List, Optional, Type

import pandas as pd
from rich.console import Console

from ..cache import CacheManager
from ..exceptions import APIError, ConfigError


class SleepTrackerPlugin(ABC):
    """Abstract base class for sleep tracker plugins."""
    
    def __init__(self, console: Console):
        """
        Initialize the plugin with a console instance and set the plugin name.
        
        The plugin name is automatically derived from the class name by removing 'plugin' and converting it to lowercase. Also loads plugin-specific configuration.
        """
        self.console = console
        self.name = self.__class__.__name__.lower().replace('plugin', '')
        self._load_config()
    
    @abstractmethod
    def _load_config(self) -> None:
        """
        Load plugin-specific configuration from environment variables.
        
        This abstract method must be implemented by each plugin to initialize any required settings using environment variables.
        """
        pass
    
    @abstractmethod
    def get_api_client(self) -> Any:
        """
        Return an authenticated API client instance for the sleep tracker service.
        
        This method must be implemented by each plugin to provide access to the corresponding service's API.
        """
        pass
    
    @abstractmethod
    def get_device_ids(self, auto_discover: bool = True) -> tuple[list[str], dict[str, str]]:
        """
        Return available device IDs and their display names for this plugin.
        
        Parameters:
            auto_discover (bool): Whether to attempt automatic device discovery or use only configured devices.
        
        Returns:
            A tuple containing a list of device IDs and a dictionary mapping each device ID to its display name.
        """
        pass
    
    @abstractmethod
    def fetch_data(
        self,
        device_id: str,
        start_date: datetime,
        end_date: datetime,
        cache: CacheManager,
    ) -> pd.DataFrame:
        """
        Fetch sleep data for the specified device and date range, returning a DataFrame with standardized sleep metrics.
        
        Parameters:
            device_id (str): The unique identifier of the device to retrieve data from.
            start_date (datetime): The beginning of the date range for data retrieval.
            end_date (datetime): The end of the date range for data retrieval.
            cache (CacheManager): Cache manager used to optimize data retrieval.
        
        Returns:
            pd.DataFrame: A DataFrame containing columns for date, heart rate (hr), respiratory rate (rr), sleep duration (sleep_dur), sleep quality score (score), and optionally toss and turn count (tnt).
        """
        pass
    
    @abstractmethod
    def discover_devices(self) -> None:
        """
        Displays guidance or information to help the user discover and configure devices supported by the plugin.
        """
        pass
    
    @property
    @abstractmethod
    def notification_title(self) -> str:
        """
        Returns the title to use for push notifications generated by the plugin.
        """
        pass


class PluginManager:
    """Manages loading and access to sleep tracker plugins."""
    
    def __init__(self, console: Console):
        """
        Initialize the PluginManager with a console instance and discover available sleep tracker plugins.
        """
        self.console = console
        self._plugins: Dict[str, Type[SleepTrackerPlugin]] = {}
        self._load_plugins()
    
    def _load_plugins(self) -> None:
        """
        Discovers and registers all valid sleep tracker plugin classes from Python files in the plugins directory.
        
        Scans the current directory for plugin modules, dynamically imports them, and registers any subclasses of `SleepTrackerPlugin` (excluding the base class) in the internal plugin registry. Skips files starting with an underscore or named `base.py`. Logs warnings or errors if a plugin fails to load or encounters import issues.
        """
        plugins_dir = Path(__file__).parent
        
        # Import all plugin modules
        for plugin_file in plugins_dir.glob("*.py"):
            if plugin_file.name.startswith("_") or plugin_file.name == "base.py":
                continue
                
            module_name = plugin_file.stem
            try:
                # Use importlib for safer import handling
                import importlib.util
                spec = importlib.util.spec_from_file_location(
                    f"anomaly_detector.plugins.{module_name}", 
                    plugin_file
                )
                if spec and spec.loader:
                    module = importlib.util.module_from_spec(spec)
                    spec.loader.exec_module(module)
                    
                    # Find plugin classes in the module
                    for attr_name in dir(module):
                        try:
                            attr = getattr(module, attr_name)
                            if (
                                isinstance(attr, type) and
                                issubclass(attr, SleepTrackerPlugin) and
                                attr is not SleepTrackerPlugin
                            ):
                                plugin_name = module_name.lower()
                                self._plugins[plugin_name] = attr
                                logging.debug(f"Loaded plugin: {plugin_name}")
                        except (AttributeError, TypeError) as e:
                            logging.debug(f"Skipping attribute {attr_name} in {module_name}: {e}")
                            continue
                else:
                    logging.warning(f"Could not create module spec for {module_name}")
                        
            except (ImportError, FileNotFoundError, AttributeError) as e:
                logging.warning(f"Failed to load plugin {module_name}: {e}")
            except Exception as e:
                logging.error(f"Unexpected error loading plugin {module_name}: {e}")
    
    def get_plugin(self, name: str) -> Optional[SleepTrackerPlugin]:
        """
        Retrieve an instance of the sleep tracker plugin matching the specified name, or return None if not found.
        
        Parameters:
            name (str): Plugin name to look up, case-insensitive.
        
        Returns:
            Optional[SleepTrackerPlugin]: Instantiated plugin if found; otherwise, None.
        """
        plugin_class = self._plugins.get(name.lower())
        if plugin_class:
            return plugin_class(self.console)
        return None
    
    def list_plugins(self) -> List[str]:
        """
        Return the names of all available sleep tracker plugins.
        
        Returns:
            List of plugin names as strings.
        """
        return list(self._plugins.keys())
    
    def get_default_plugin(self) -> Optional[SleepTrackerPlugin]:
        """
        Return an instance of the default sleep tracker plugin ("emfit") if available.
        
        Returns:
            The "emfit" plugin instance, or None if it is not registered.
        """
        return self.get_plugin("emfit")