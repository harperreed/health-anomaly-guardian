"""
ABOUTME: Plugin system for sleep tracker integrations
ABOUTME: Handles plugin discovery, loading, and management
"""

import logging
from abc import ABC, abstractmethod
from datetime import datetime
from pathlib import Path
from typing import Any

import pandas as pd
from rich.console import Console

from ..cache import CacheManager


class SleepTrackerPlugin(ABC):
    """Abstract base class for sleep tracker plugins."""

    def __init__(self, console: Console):
        """
        Initialize the plugin with a console instance and set the plugin name.

        The plugin name is automatically derived from the class name by removing 'plugin' and converting it to lowercase. Also loads plugin-specific configuration.
        """
        self.console = console
        self.name = self.__class__.__name__.lower().replace("plugin", "")
        self._load_config()

    @abstractmethod
    def _load_config(self) -> None:
        """
        Loads configuration settings for the plugin from environment variables.

        This abstract method must be implemented by each plugin to initialize its required configuration using environment variables.
        """
        pass

    @abstractmethod
    def get_api_client(self) -> Any:
        """
        Initialize and return an authenticated API client for the sleep tracker service.

        Returns:
            An authenticated API client instance specific to the plugin implementation.
        """
        pass

    @abstractmethod
    def get_device_ids(
        self, auto_discover: bool = True
    ) -> tuple[list[str], dict[str, str]]:
        """
        Return available device IDs and their display names for this sleep tracker.

        Parameters:
            auto_discover (bool): Whether to attempt automatic device discovery or use only configured devices.

        Returns:
            A tuple containing a list of device IDs and a dictionary mapping each device ID to its display name.
        """
        pass

    @abstractmethod
    def fetch_data(
        self,
        device_id: str,
        start_date: datetime,
        end_date: datetime,
        cache: CacheManager,
    ) -> pd.DataFrame:
        """
        Fetch sleep data for a specific device over a date range, returning a DataFrame with standardized sleep metrics.

        The returned DataFrame includes columns for date, heart rate (hr), respiratory rate (rr), sleep duration (sleep_dur), sleep quality score (score), and may include toss and turn count (tnt) if available.

        Parameters:
            device_id (str): The unique identifier of the device.
            start_date (datetime): The start date for data retrieval.
            end_date (datetime): The end date for data retrieval.
            cache (CacheManager): Used to optimize repeated data access.

        Returns:
            pd.DataFrame: Standardized sleep data for the specified device and date range.
        """
        pass

    @abstractmethod
    def discover_devices(self) -> None:
        """
        Displays guidance or information to help users discover and configure available sleep tracker devices.
        """
        pass

    @property
    @abstractmethod
    def notification_title(self) -> str:
        """
        Returns the title used for push notifications generated by the plugin.
        """
        pass

    def _get_cache_key(self, device_id: str, date_str: str) -> str:
        """
        Generate a cache key for the given device ID and date string.

        Parameters:
            device_id (str): The device identifier
            date_str (str): The date in string format

        Returns:
            str: A cache key combining plugin name, device ID, and date
        """
        return f"{self.name}_{device_id}_{date_str}"


class PluginManager:
    """Manages loading and access to sleep tracker plugins."""

    def __init__(self, console: Console):
        """
        Initialize the PluginManager with a console and load all available sleep tracker plugins.
        """
        self.console = console
        self._plugins: dict[str, type[SleepTrackerPlugin]] = {}
        self._load_plugins()

    def _load_plugins(self) -> None:
        """
        Discovers and registers all valid sleep tracker plugin classes from Python files in the plugins directory.

        Scans the current directory for plugin modules, imports them, and adds subclasses of `SleepTrackerPlugin` (excluding the base class) to the internal plugin registry. Skips files starting with an underscore or named `base.py`. Logs warnings if a plugin fails to load or cannot be imported.
        """
        plugins_dir = Path(__file__).parent

        # Import all plugin modules
        for plugin_file in plugins_dir.glob("*.py"):
            if plugin_file.name.startswith("_") or plugin_file.name == "base.py":
                continue

            module_name = plugin_file.stem
            try:
                # Use importlib for safer import handling
                import importlib.util

                spec = importlib.util.spec_from_file_location(
                    f"anomaly_detector.plugins.{module_name}", plugin_file
                )
                if spec and spec.loader:
                    module = importlib.util.module_from_spec(spec)
                    spec.loader.exec_module(module)

                    # Find plugin classes in the module
                    for attr_name in dir(module):
                        try:
                            attr = getattr(module, attr_name)
                            if (
                                isinstance(attr, type)
                                and issubclass(attr, SleepTrackerPlugin)
                                and attr is not SleepTrackerPlugin
                            ):
                                plugin_name = module_name.lower()
                                self._plugins[plugin_name] = attr
                                logging.debug(f"Loaded plugin: {plugin_name}")
                        except (AttributeError, TypeError) as e:
                            logging.debug(
                                f"Skipping attribute {attr_name} in {module_name}: {e}"
                            )
                            continue
                else:
                    logging.warning(f"Could not create module spec for {module_name}")

            except (ImportError, FileNotFoundError, AttributeError) as e:
                logging.warning(f"Failed to load plugin {module_name}: {e}")
            except Exception as e:
                logging.error(f"Unexpected error loading plugin {module_name}: {e}")

    def get_plugin(self, name: str) -> SleepTrackerPlugin | None:
        """
        Retrieve an instance of the sleep tracker plugin matching the specified name.

        Parameters:
            name (str): Name of the plugin to retrieve (case-insensitive).

        Returns:
            Optional[SleepTrackerPlugin]: An instance of the requested plugin, or None if not found.
        """
        plugin_class = self._plugins.get(name.lower())
        if plugin_class:
            try:
                return plugin_class(self.console)
            except Exception as e:
                logging.error(f"Error instantiating plugin {name}: {e}")
                return None
        return None

    def list_plugins(self) -> list[str]:
        """
        Return the names of all available sleep tracker plugins.

        Returns:
            List of plugin names as strings.
        """
        return list(self._plugins.keys())

    def get_default_plugin(self) -> SleepTrackerPlugin | None:
        """
        Return an instance of the default sleep tracker plugin ("emfit") if available.

        Returns:
            The "emfit" plugin instance, or None if it is not available.
        """
        return self.get_plugin("emfit")
