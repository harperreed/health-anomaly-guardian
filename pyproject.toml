[project]
name = "health-anomaly-guardian"
version = "0.1.0"
description = "Add your description here"
readme = "README.md"
requires-python = ">=3.13"
dependencies = [
    "numpy>=2.2.6",
    "emfitapi-python @ git+https://github.com/harperreed/emfitapi-python.git",
    "pandas>=2.3.1",
    "python-dotenv>=1.1.1",
    "openai>=1.93.1",
    "scikit-learn>=1.6.1",
    "rich>=14.0.0",
]

[dependency-groups]
dev = [
    "pytest>=8.3.4",
    "pytest-cov>=6.0.0",
    "pytest-mock>=3.14.0",
    "ruff>=0.9.0",
    "safety>=3.2.8",
    "bandit>=1.8.0",
    "requests>=2.32.0",
]


[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["anomaly_detector"]

[tool.hatch.metadata]
allow-direct-references = true

[project.scripts]
anomaly-detector = "anomaly_detector.cli:main"

[tool.pytest.ini_options]
testpaths = ["tests"]
addopts = "--strict-markers --strict-config --disable-warnings"
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]

[tool.ruff]
line-length = 88
target-version = "py313"

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.coverage.run]
source = ["anomaly_detector"]
omit = ["tests/*"]

[tool.setuptools]
packages = ["anomaly_detector"]


[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
